package gol;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.MouseEvent;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

/**
 *
 * @author loux
 */
public class GameOfLifeJFrame extends javax.swing.JFrame {

    /**
     * Creates new form GameOfLifeJFrame
     */
    public GameOfLifeJFrame() {
        geometry = new Geometry.Rectangle(200, 200);
        GameOfLife.randomInitialize(geometry);
        gameOfLifeSwingWorker = new GameOfLifeSwingWorker();
        gameOfLifeSwingWorker.cancel(true);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 0), new java.awt.Dimension(10, 32767));
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("This is the game of life");
        setPreferredSize(new java.awt.Dimension(1000, 800));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setPreferredSize(new java.awt.Dimension(200, 800));
        jPanel1.setRequestFocusEnabled(false);
        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jLabel1.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("<html><b>Here are the instructions !</b><br/><br/> <b>White</b> cells are <b>alive</b>  <br/><b> Black</b> cells are <b>dead</b>  <br/><br/><i>`i'</i> : initialize the game<br/> <i>`space'</i>  : pause/resume the game<br/> <i>`n'</i>  : change the size of the game <br/><br/>A click on a cell will turn a dead cell alive, and <i>vice versa</i></html>");
        jLabel1.setAlignmentX(0.5F);
        jPanel1.add(jLabel1);
        jPanel1.add(filler1);

        jLabel3.setFont(new java.awt.Font("Consolas", 0, 11)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(240, 240, 240));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("<html><i>\"Stupid fucking white man\"</i>,<br/> DEAD MAN 1995 - Jim Jarmusch </html>");
        jLabel3.setAlignmentX(0.5F);
        jPanel1.add(jLabel3);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gol/fixed-480w.png"))); // NOI18N
        jLabel2.setAlignmentX(0.5F);
        jPanel1.add(jLabel2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.WEST);

        jPanel2.setPreferredSize(new java.awt.Dimension(800, 800));
        jPanel2.setLayout(new java.awt.BorderLayout());
        jPanel2.add(new GameOfLifeJPanel(), BorderLayout.CENTER);
        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyChar()) {
            case 'i':
                gameOfLifeSwingWorker.cancel(true);
                GameOfLife.randomInitialize(geometry);
                jPanel2.repaint();
                break;
            case ' ':
                if (gameOfLifeSwingWorker.isDone()) {
                    gameOfLifeSwingWorker = new GameOfLifeSwingWorker();
                    java.awt.EventQueue.invokeLater(() -> {
                        gameOfLifeSwingWorker.execute();
                    });
                } else {
                    gameOfLifeSwingWorker.cancel(true);
                }
                break;
            case 'n':
                gameOfLifeSwingWorker.cancel(true);
                String s = JOptionPane.showInputDialog(jPanel2, "Stupid, fucking white man,\n"
                        + "change the number of cells along the horizontal and vertical directions.",
                        "Format ex.: 100x100");
                String msg = "Problem while key pressed.";
                if (s != null && s.length() > 0) {
                    String[] split = s.split("x");
                    if (split.length == 2) {
                        try {
                            int nbColumns = Integer.parseInt(split[0]);
                            int nbRows = Integer.parseInt(split[1]);
                            geometry = new Geometry.Rectangle(nbRows, nbColumns);
                            GameOfLife.randomInitialize(geometry);
                            jPanel2.repaint();
                        } catch (NumberFormatException ex) {
                            msg += "Invalid input format for game of life size,\n"
                                    + "it should be the number of cells along the horizontal x the number of cells along vertical directions,\n"
                                    + "was given " + s + "\n";
                            msg += ex.getMessage();
                        }
                    } else {
                        msg += "Invalid input for game of life size, was given \"" + s + "\"";
                    }
                } else {
                    msg += "Null input size.";
                }
                if (msg.length() > 26) {
                    java.util.logging.Logger.getLogger(GameOfLifeJFrame.class.getName()).log(java.util.logging.Level.WARNING, msg);
                }
                break;
            default:
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameOfLifeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameOfLifeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameOfLifeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameOfLifeJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            GameOfLifeJFrame gameOfLifeJFrame = new GameOfLifeJFrame();
            gameOfLifeJFrame.setVisible(true);
        });
    }

    private final class GameOfLifeJPanel extends JPanel {

        public GameOfLifeJPanel() {
            addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
                public void mouseClicked(MouseEvent e) {
                    formMouseClicked(e);
                }

            });
        }

        private void formMouseClicked(MouseEvent e) {
            Cell cell = getCell(e.getPoint());
            cell.switchState();
            GameOfLifeJPanel.this.repaint();
        }

        public Cell getCell(java.awt.Point point) {
            Cell cell = null;
            int cellHeight = getCellHeight();
            int cellWidth = getCellWidth();
            double y = point.getY();
            double x = point.getX();
            int row = (int) y / cellHeight;
            int column = (int) x / cellWidth;
            cell = geometry.getCells()[0][row][column];
            return cell;
        }

        @Override
        public void paint(Graphics g) {
            super.paint(g);
            Graphics2D g2D = (Graphics2D) g;
            g2D.setPaint(Color.GRAY);
            int cellHeight = getCellHeight();
            int cellWidth = getCellWidth();
            for (int layer = 0; layer < geometry.getDepth(); layer++) {
                for (int row = 0; row < geometry.getHeight(); row++) {
                    int y = row * cellHeight;
                    for (int column = 0; column < geometry.getWidth(); column++) {
                        int x = column * cellWidth;
                        Cell cell = geometry.getCells()[layer][row][column];
                        if (cell.isAlive()) {
                            g2D.setPaint(Color.WHITE);
                        } else {
                            g2D.setPaint(Color.BLACK);
                        }
                        g2D.fillRect(x, y, cellWidth, cellHeight);
                    }
                }
            }
        }

        private int getCellHeight() {
            return ((int) Math.ceil((double) this.getHeight() / geometry.getHeight()));
        }

        private int getCellWidth() {
            return ((int) Math.ceil((double) this.getWidth() / geometry.getWidth()));
        }
    }

    private class GameOfLifeSwingWorker extends SwingWorker<Integer, Geometry> {

        private int it_;
        
        @Override
        protected void process(java.util.List<Geometry> chunks) {
            for (Geometry geometry : chunks) {
//                this.gameOfLifeJFrame.jPanel1.repaint();
            }
            jPanel2.repaint();
        }

        @Override
        protected void done() {
            try {
                if (!isCancelled()) {
                    System.out.println("stationary state reached in " + get() + " iterations.");
                }
            } catch (InterruptedException | ExecutionException ex) {
                Logger.getLogger(GameOfLifeJFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        protected Integer doInBackground() throws Exception {
            boolean isEvolving = true;
            while (!isCancelled() && isEvolving) {
                isEvolving = GameOfLife.nextGeneration(geometry, new Strategy.Default());
                publish(geometry);
                it_++;
                TimeUnit.MILLISECONDS.sleep(200);
            }
            return it_;
        }
    }

    private Geometry geometry;
    private GameOfLifeSwingWorker gameOfLifeSwingWorker;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
